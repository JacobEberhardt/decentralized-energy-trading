
  //The comments and explanations are provided for an example with n households!

import "hashes/sha256/512bitPacked.code" as sha256packed

// Aggregates the Energy of Energy producing HHS.
// @param {field[n]} Energy producing HHs
// @returns {field} energy of provided households
def energyOfWE(field[1] hh) -> (field):
  field energy = 0
  for field i in 0..1 do
    energy = energy + hh[i]
  endfor
  return energy

// Aggregates the Energy of Energy consuming HHS.
// @param {field[m]} Energy producing HHs
// @returns {field} energy of provided households
def energyOfNE(field[4] hh) -> (field):
  field energy = 0
  for field i in 0..4 do
    energy = energy + hh[i]
  endfor
  return energy

// Returns total energy balance of the system. Remember, this balance can be available or needed energy.
// @param {field[n]} hhWithEnergy
// @param {field[m]} hhNoEnergy
// @returns {field} totalEnergy
def calculateTotalDelta(field[1] hhWithEnergy, field[4] hhNoEnergy) -> (field):
  producerDelta = energyOfWE(hhWithEnergy)
  consumerDelta = energyOfNE(hhNoEnergy)
  field totalDelta = if (producerDelta > consumerDelta) then (producerDelta - consumerDelta) else (consumerDelta - producerDelta) fi
  return totalDelta

// Returns sum of deltas between hh and hhNet with Energy
// @param {field[n]} hh
// @param {field[n]} hhNet
// @returns {field} delta
def deltaNetWE(field[1] hh, field[1] hhNet) -> (field):
  field delta = 0
  for field i in 0..0 do
    delta = delta + (hh[i] - hhNet[i])
  endfor
  return delta

// Returns sum of deltas between hh and hhNet without Energy
// @param {field[m]} hh
// @param {field[m]} hhNet
// @returns {field} delta
def deltaNetNE(field[4] hh, field[4] hhNet) -> (field):
  field delta = 0
  for field i in 0..4 do
    delta = delta + (hh[i] - hhNet[i])
  endfor
  return delta

// Returns errorCounter. Implements weak fairness invariant for HHs with Energy
// @param {field[n]} hh
// @param {field[n]} hhNet
// @returns {field} errorCounter
def validateFairnessWE(field[1] hh, field[1] hhNet) -> (field):
  field errorCounter = 0
  for field i in 0..0 do
    errorCounter = errorCounter + if hhNet[i] > hh[i] then 1 else 0 fi
  endfor
  return errorCounter

// Returns errorCounter. Implements weak fairness invariant for HHs without Energy
// @param {field[m]} hh
// @param {field[m]} hhNet
// @returns {field} errorCounter
def validateFairnessNE(field[4] hh, field[4] hhNet) -> (field):
  field errorCounter = 0
  for field i in 0..4 do
    errorCounter = errorCounter + if hhNet[i] > hh[i] then 1 else 0 fi
  endfor
  return errorCounter

// Validates the zero-net property (one set of household will be 0 (up to an epislon error) after netting)
// for the case of sumWithEnergy <= sumNoEnergy
// Is valid, only if returns 0.
// @param (field[n]) household party having energy
// @param epsilon the error tolerance value
def validateZeroNetWE(field[1] hh, field epsilon) -> (field):
  field errorCounter = 0
  for field i in 0..1 do
    errorCounter = errorCounter + if hh[i] > epsilon then 1 else 0 fi
  endfor
  return errorCounter

// Validates the zero-net property (one set of household will be 0 (up to an epislon error) after netting)
// for the case of sumWithEnergy >= sumNoEnergy
// Is valid, only if returns 0.
// @param (field[m]) household party needing
// @param epsilon the error tolerance value
def validateZeroNetNE(field[4] hh, field epsilon) -> (field):
  field errorCounter = 0
  for field i in 0..4 do
    errorCounter = errorCounter + if hh[i] > epsilon then 1 else 0 fi
  endfor
  return errorCounter

// Simply return hh[0] + hh[1] for any array of households with energy.
// @param (field[n]) hh
// @returns (field) energy of provided households
def sumWE(field[1] hh) -> (field):
  field s = 0
  for field i in 0..1 do
    s = s + hh[i]
  endfor
  return s

// Simply return hh[0] + hh[1] for any array of households without energy.
// @param (field[m]) hh
// @returns (field) energy of provided households
def sumNE(field[4] hh) -> (field):
  field s = 0
  for field i in 0..4 do
    s = s + hh[i]
  endfor
  return s


// Returns sha256packed hash if settlement result is consistent and proportional fair up to epsilon = 15
// Assume n = 4 households, where |householdListWithEnergy| = 2 and |householdListNoEnergy| = 2
// Before settlement, households with produce-consume = 0 are not part of the settlement
// @param (private field[2]) hhWithEnergy before settlement
// Index represents household and hhWithEnergy[index] := produce-consume > 0 
// @param (private field[2]) hhNoEnergy before settlement
// Index represents household and hhNoEnergy[index] := produce-consume < 0 
// @param (private field[2]) hhWithEnergyNet after settlement
// Index represents household and hhWithEnergyNet[index] := produce-consume > 0 
// @param (private field[2]) hhNoEnergyNet after settlement
// Index represents household and hhNoEnergyNet[index] := produce-consume < 0
// @param (private field[8]) hhWithEnergyPacked Packed inputs energy + nonce + address of hh with energy surplus
// Index 0 to 3 are packed inputs of hh1 with energy surplus
// Index 4 to 7 are packed inputs of hh2 with energy surplus
// @param (private field[8]) hhNoEnergyPacked Packed inputs energy + nonce + address of hh with energy deficit
// Index 0 to 3 are packed inputs of hh1 with energy deficit
// Index 4 to 7 are packed inputs of hh2 with energy deficit
// @returns (field[2], field[2], field[2], field[2], field[2],...) sha256packed hashes of hhWithEnergyPacked and hhNoEnergyPacked and sha256packed hash that depends on inputs
def main(private field[1] hhWithEnergy, private field[4] hhNoEnergy, private field[1] hhWithEnergyNet, private field[4] hhNoEnergyNet) -> (field[2],field[2],field[2],field[2],field[2]):
  totalDelta = calculateTotalDelta(hhWithEnergy, hhNoEnergy)
  totalDeltaNet = calculateTotalDelta(hhWithEnergyNet, hhNoEnergyNet)
  totalDelta == totalDeltaNet

  0 == validateFairnessWE(hhWithEnergy, hhWithEnergyNet)
  0 == validateFairnessNE(hhNoEnergy, hhNoEnergyNet)

  field sumWithEnergy = sumWE(hhWithEnergyNet)
  field sumNoEnergy = sumNE(hhNoEnergyNet)

  field[1] zeroNetPartyWE = hhWithEnergyNet
  field[4] zeroNetPartyNE = hhNoEnergyNet

  0 == if sumWithEnergy <= sumNoEnergy then validateZeroNetWE(zeroNetPartyWE, 15) else validateZeroNetNE(zeroNetPartyNE, 15) fi// Can make epsilon more accurate in the future
  //  field energySumWE = hhWithEnergy[0] + hhWithEnergyNet[0]
  //  field energySumNE = hhNoEnergy[0] + hhNoEnergyNet[0] + hhNoEnergy[1] + hhNoEnergyNet[1] + hhNoEnergy[2] + hhNoEnergyNet[2] + hhNoEnergy[3] + hhNoEnergyNet[3]

  //field energySum = energySumWE + energySumNE
  //h = sha256packed([0, 0, 0, energySum])
  field[2] hh1WithEnergyHash = if hhWithEnergy[0] == 0 then [0, 0] else sha256packed([0, 0, 0, hhWithEnergy[0]]) fi
  field[2] hh1NoEnergyHash = if hhNoEnergy[0] == 0 then [0, 0] else sha256packed([0, 0, 0, hhNoEnergy[0]]) fi
  field[2] hh2NoEnergyHash = if hhNoEnergy[1] == 0 then [0, 0] else sha256packed([0, 0, 0, hhNoEnergy[1]]) fi
  field[2] hh3NoEnergyHash = if hhNoEnergy[2] == 0 then [0, 0] else sha256packed([0, 0, 0, hhNoEnergy[2]]) fi
  field[2] hh4NoEnergyHash = if hhNoEnergy[3] == 0 then [0, 0] else sha256packed([0, 0, 0, hhNoEnergy[3]]) fi
  return  hh1WithEnergyHash, hh1NoEnergyHash, hh2NoEnergyHash, hh3NoEnergyHash, hh4NoEnergyHash //h
