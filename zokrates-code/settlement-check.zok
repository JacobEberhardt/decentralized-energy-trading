
  
//The comments and explanations are provided for an example with n households!

import "hashes/sha256/512bitPacked.code" as sha256packed

// Aggregates the combined meterDelta of Energy producing HHS.
// @param {field[n]} Energy producing HHs
// @returns {field} meterDelta of provided households
def deltaProducers(field[1] hh) -> (field):
  field delta = 0
  for field i in 0..1 do
    delta = delta + hh[i]
  endfor
  return delta

// Aggregates the combined meterDelta of Energy consuming HHS.
// @param {field[m]} Energy producing HHs
// @returns {field} meterDelta of provided households
def deltaConsumers(field[1] hh) -> (field):
  field delta = 0
  for field i in 0..1 do
    delta = delta + hh[i]
  endfor
  return delta

// Returns total energy balance of the system. Remember, this balance can be available or needed energy.
// @param {field[n]} producersBeforeNet
// @param {field[m]} consumersBeforeNet
// @returns {field} totalEnergy
def calculateTotalDelta(field[1] producersBeforeNet, field[1] consumersBeforeNet) -> (field):
  producerDelta = deltaProducers(producersBeforeNet)
  consumerDelta = deltaConsumers(consumersBeforeNet)
  field totalDelta = if (producerDelta > consumerDelta) then (producerDelta - consumerDelta) else (consumerDelta - producerDelta) fi
  return totalDelta

// Returns sum of deltas between hh and hhNet with Energy
// @param {field[n]} hh
// @param {field[n]} hhNet
// @returns {field} delta
def deltaNetProducers(field[1] hh, field[1] hhNet) -> (field):
  field delta = 0
  for field i in 0..0 do
    delta = delta + (hh[i] - hhNet[i])
  endfor
  return delta

// Returns sum of deltas between hh and hhNet without Energy
// @param {field[m]} hh
// @param {field[m]} hhNet
// @returns {field} delta
def deltaNetConsumers(field[1] hh, field[1] hhNet) -> (field):
  field delta = 0
  for field i in 0..1 do
    delta = delta + (hh[i] - hhNet[i])
  endfor
  return delta

// Returns errorCounter. Implements weak fairness invariant for HHs with Energy
// @param {field[n]} hh
// @param {field[n]} hhNet
// @returns {field} errorCounter
def validateFairnessProducers(field[1] hh, field[1] hhNet) -> (field):
  field errorCounter = 0
  for field i in 0..0 do
    errorCounter = errorCounter + if hhNet[i] > hh[i] then 1 else 0 fi
  endfor
  return errorCounter

// Returns errorCounter. Implements weak fairness invariant for HHs without Energy
// @param {field[m]} hh
// @param {field[m]} hhNet
// @returns {field} errorCounter
def validateFairnessConsumers(field[1] hh, field[1] hhNet) -> (field):
  field errorCounter = 0
  for field i in 0..1 do
    errorCounter = errorCounter + if hhNet[i] > hh[i] then 1 else 0 fi
  endfor
  return errorCounter

// Validates the zero-net property (one set of household will be 0 (up to an epislon error) after netting)
// for the case of sumProducers <= sumConsumers
// Is valid, only if returns 0.
// @param (field[n]) household party having energy
// @param epsilon the error tolerance value
def validateZeroNetProducers(field[1] hh, field epsilon) -> (field):
  field errorCounter = 0
  for field i in 0..1 do
    errorCounter = errorCounter + if hh[i] > epsilon then 1 else 0 fi
  endfor
  return errorCounter

// Validates the zero-net property (one set of household will be 0 (up to an epislon error) after netting)
// for the case of sumProducers >= sumConsumers
// Is valid, only if returns 0.
// @param (field[m]) household party needing
// @param epsilon the error tolerance value
def validateZeroNetConsumers(field[1] hh, field epsilon) -> (field):
  field errorCounter = 0
  for field i in 0..1 do
    errorCounter = errorCounter + if hh[i] > epsilon then 1 else 0 fi
  endfor
  return errorCounter

// Simply return hh[0] + hh[1] for any array of households with energy.
// @param (field[n]) hh
// @returns (field) energy of provided households
def sumProducers(field[1] hh) -> (field):
  field s = 0
  for field i in 0..1 do
    s = s + hh[i]
  endfor
  return s

// Simply return hh[0] + hh[1] for any array of households without energy.
// @param (field[m]) hh
// @returns (field) energy of provided households
def sumConsumers(field[1] hh) -> (field):
  field s = 0
  for field i in 0..1 do
    s = s + hh[i]
  endfor
  return s


// Returns sha256packed hash if settlement result is consistent and proportional fair up to epsilon = (number of households - 1)
// Assume n = 4 households, where |householdListProducers| = 2 and |householdListConsumers| = 2
// Before settlement, households with produce-consume = 0 are not part of the settlement
// @param (private field[1]) producersBeforeNet before settlement
// Index represents household and producersBeforeNet[index] := produce-consume > 0 
// @param (private field[1]) consumersBeforeNet before settlement
// Index represents household and consumersBeforeNet[index] := produce-consume < 0 
// @param (private field[1]) producersAfterNet after settlement
// Index represents household and producersAfterNet[index] := produce-consume > 0 
// @param (private field[1]) consumersAfterNet after settlement
// Index represents household and consumersAfterNet[index] := produce-consume < 0
// @returns (field[2], field[2], field[2], field[2], field[2],...) sha256packed hashes of producersBeforeNetPacked and consumersBeforeNetPacked and sha256packed hash that depends on inputs
def main(private field[1] producersBeforeNet, private field[1] consumersBeforeNet, private field[1] producersAfterNet, private field[1] consumersAfterNet) -> (field[2],field[2],field[2],field[2]):
  totalDelta = calculateTotalDelta(producersBeforeNet, consumersBeforeNet)
  totalDeltaNet = calculateTotalDelta(producersAfterNet, consumersAfterNet)
  totalDelta == totalDeltaNet

  0 == validateFairnessProducers(producersBeforeNet, producersAfterNet)
  0 == validateFairnessConsumers(consumersBeforeNet, consumersAfterNet)

  field sumProducers = sumProducers(producersAfterNet)
  field sumConsumers = sumConsumers(consumersAfterNet)

  field[1] zeroNetPartyProducers = producersAfterNet
  field[1] zeroNetPartyConsumers = consumersAfterNet

  0 == if sumProducers <= sumConsumers then validateZeroNetProducers(zeroNetPartyProducers, 1) else validateZeroNetConsumers(zeroNetPartyConsumers, 1) fi// Can make epsilon more accurate in the future
  field[2] hh1ProducersBeforeNetHash = if producersBeforeNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[0]]) fi
  field[2] hh1ProducersAfterNetHash = if producersAfterNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[0]]) fi
  field[2] hh1ConsumersBeforeNetHash = if consumersBeforeNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[0]]) fi
  field[2] hh1ConsumersAfterNetHash = if consumersAfterNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[0]]) fi
  return  hh1ProducersBeforeNetHash, hh1ConsumersBeforeNetHash, hh1ProducersAfterNetHash, hh1ConsumersAfterNetHash
